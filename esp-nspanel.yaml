#####################################################################

substitutions:
  node_name: esp-nspanel
  node_description: "Living room NsPanel"
  hass_entity_prefix: NSPanel
  

  ## Name of the climate entity to control
  climate_entity: climate.air_conditioner

  ## Left switch description and entity to control
  left_switch_description: "Lamps"
  left_switch_entity: light.living_room_lamps
  
  ## Left switch description and entity to control
  right_switch_description: "RGB lights"
  right_switch_entity: light.living_room_minibar_rgb
  

#####################################################################



esphome:
  name: $node_name
  comment: $node_description

esp32:
  board: esp32dev

# Enable logging
logger:


ota:
  password: !secret ota_pwd_esp-nspanel

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h



#####################################################################
#
# API
#
#####################################################################
api:
  services:
    - service: update_lcd
      then: 
        - lambda: 'id(disp)->upload_tft();'



#####################################################################
#
# Nextion display
#
#####################################################################
display:
  - platform: nextion
    uart_id: tft_uart
    id: disp
    tft_url: !secret nspanel_tft_url
    
    on_setup:
      then:
        - light.turn_on:
            id: backlight
            brightness: 75%

        - wait_until:
            api.connected

        - switch.template.publish:
            id: nextion_init
            state: on

        - lambda: |-
            id(disp).set_component_text_printf("main.btnLightLeft","%s", "$left_switch_description");
            id(disp).set_component_text_printf("selectFanSpeed.btnLightLeft","%s", "$left_switch_description");
            id(disp).set_component_text_printf("selectMode.btnLightLeft","%s", "$left_switch_description");
            
            id(disp).set_component_text_printf("main.btnLightRight","%s", "$right_switch_description");
            id(disp).set_component_text_printf("selectFanSpeed.btnLightRight","%s", "$right_switch_description");
            id(disp).set_component_text_printf("selectMode.btnLightRight","%s", "$right_switch_description");
        
        - delay: 1s
            
        - lambda: |-
            id(disp).send_command_printf("page main");

uart:
  id: tft_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200



#####################################################################
#
# Time
#
#####################################################################
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              id(disp).set_component_text_printf("main.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp).set_component_text_printf("selectFanSpeed.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp).set_component_text_printf("selectMode.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          
    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
              
          - lambda: |-
              id(disp).set_component_text_printf("main.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp).set_component_text_printf("selectFanSpeed.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
              id(disp).set_component_text_printf("selectMode.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);



#####################################################################
#
# Panel backlight
#
#####################################################################
output:
  platform: template
  type: float
  id: panel_brightness
  write_action: 
    - lambda: 'id(disp).set_backlight_brightness(state);'

light:
  platform: monochromatic
  output: panel_brightness
  name: $hass_entity_prefix Backlight
  icon: mdi:brightness-6
  entity_category: config
  id: backlight
  gamma_correct: 1
  default_transition_length: 0.3s
  


#####################################################################
#
# Binary sensors
#
#####################################################################
binary_sensor:

  #-------------------------------------------------
  # Left physical button click
  #-------------------------------------------------
  - platform: gpio
    id: button_left
    pin:
      number: 14
      inverted: true
    on_click:
      then:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $left_switch_entity
        

  #-------------------------------------------------
  # Right physical button click
  #-------------------------------------------------
  - platform: gpio
    id: button_right
    pin:
      number: 27
      inverted: true
    on_click:
      then:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: $right_switch_entity


  #-------------------------------------------------
  # Panel scene buttons
  #-------------------------------------------------
  - platform: nextion
    internal: true
    id: scene_btn_watch_tv
    page_id: 1
    component_id: 2
    on_release:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.watch_tv
    
  - platform: nextion
    internal: true
    id: scene_btn_movies
    page_id: 1
    component_id: 3
    on_release:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.movies
    
  - platform: nextion
    internal: true
    id: scene_btn_dim
    page_id: 1
    component_id: 4
    on_release:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.dim_lighting

  - platform: nextion
    internal: true
    id: scene_btn_max
    page_id: 1
    component_id: 7
    on_release:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.max_brightness



#####################################################################
#
# Switches
#
#####################################################################
switch:

  #-------------------------------------------------
  # Display power up (Always on)
  #-------------------------------------------------
  - platform: gpio
    internal: true
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON


  #-------------------------------------------------
  # Nextion panel init flag
  #-------------------------------------------------
  - platform: template
    internal: true
    id: nextion_init
    restore_state: false
    assumed_state: off
    optimistic: true
  
  
  #-------------------------------------------------
  # Left switch state (from panel)
  #-------------------------------------------------  
  - platform: nextion
    internal: true
    id: left_switch_state_panel
    component_name: btnLightLeft
    on_turn_on:
      - homeassistant.service:
          service: light.turn_on
          data:
            entity_id: $left_switch_entity
        
    on_turn_off:
      - homeassistant.service:
          service: light.turn_off
          data:
            entity_id: $left_switch_entity    
  
  
  #-------------------------------------------------
  # Right switch state (from panel)
  #-------------------------------------------------  
  - platform: nextion
    internal: true
    id: right_switch_state_panel
    component_name: btnLightRight
    on_turn_on:
      - homeassistant.service:
          service: light.turn_on
          data:
            entity_id: $right_switch_entity
        
    on_turn_off:
      - homeassistant.service:
          service: light.turn_off
          data:
            entity_id: $right_switch_entity



#####################################################################
#
# Text sensors
#
#####################################################################
text_sensor:

  #-------------------------------------------------
  # Left switch entity updates (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    internal: true
    entity_id: $left_switch_entity
    id: left_switch_state_ha
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
          
        - lambda: |-
            if(x=="on") {
              id(disp).send_command_printf("main.btnLightLeft.val=1");
              id(disp).send_command_printf("selectFanSpeed.btnLightLeft.val=1");
              id(disp).send_command_printf("selectMode.btnLightLeft.val=1");
            } else {
              id(disp).send_command_printf("main.btnLightLeft.val=0");
              id(disp).send_command_printf("selectFanSpeed.btnLightLeft.val=0");
              id(disp).send_command_printf("selectMode.btnLightLeft.val=0");
            }


  #-------------------------------------------------
  # Right switch entity updates (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    internal: true
    entity_id: $right_switch_entity
    id: right_switch_state_ha
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
          
        - lambda: |-
            if(x=="on") {
              id(disp).send_command_printf("main.btnLightRight.val=1");
              id(disp).send_command_printf("selectFanSpeed.btnLightRight.val=1");
              id(disp).send_command_printf("selectMode.btnLightRight.val=1");
            } else {
              id(disp).send_command_printf("main.btnLightRight.val=0");
              id(disp).send_command_printf("selectFanSpeed.btnLightRight.val=0");
              id(disp).send_command_printf("selectMode.btnLightRight.val=0");
            }


  #-------------------------------------------------
  # A/C - Fan speed (To home assistant)
  #-------------------------------------------------
  - platform: nextion
    internal: true
    id: climate_fanSpeed_panel
    component_name: varFanSpeed
    on_value:
      - homeassistant.service:
          service: climate.set_fan_mode
          data:
            entity_id: $climate_entity
            fan_mode: !lambda "return x.c_str();"


  #-------------------------------------------------
  # A/C - Fan speed update (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: climate_fanSpeed_ha
    entity_id: $climate_entity
    attribute: fan_mode
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - lambda: |-
            id(disp).set_component_text_printf("main.varFanSpeed", "%s", x.c_str());
            
            if (id(climate_fanSpeed_ha).state == "low") {
              id(disp).send_command_printf("main.btnSelFanSpd.pic=6");
              id(disp).send_command_printf("main.btnSelFanSpd.pic2=7");
              
            } else if (id(climate_fanSpeed_ha).state == "medium") {
              id(disp).send_command_printf("main.btnSelFanSpd.pic=8");
              id(disp).send_command_printf("main.btnSelFanSpd.pic2=9");
              
            } else if (id(climate_fanSpeed_ha).state == "high") {
              id(disp).send_command_printf("main.btnSelFanSpd.pic=10");
              id(disp).send_command_printf("main.btnSelFanSpd.pic2=11");
              
            } else {
              id(disp).send_command_printf("main.btnSelFanSpd.pic=4");
              id(disp).send_command_printf("main.btnSelFanSpd.pic2=5");
            }


  #-------------------------------------------------
  # A/C - Mode (To home assistant)
  #-------------------------------------------------
  - platform: nextion
    internal: true
    id: climate_mode_panel
    component_name: varAcMode
    on_value:
      - homeassistant.service:
          service: climate.set_hvac_mode
          data:
            entity_id: $climate_entity
            hvac_mode: !lambda "return x.c_str();"


  #-------------------------------------------------
  # A/C - Mode (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: climate_mode_ha
    entity_id: $climate_entity
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - lambda: |-
            id(disp).set_component_text_printf("main.varAcMode", "%s", x.c_str());
            
            if (id(climate_mode_ha).state == "off") {
              id(disp).send_command_printf("main.btnSetMode.pic=24");
              id(disp).send_command_printf("main.btnSetMode.pic2=25");

            } else if (id(climate_mode_ha).state == "cool") {
              id(disp).send_command_printf("main.btnSetMode.pic=2");
              id(disp).send_command_printf("main.btnSetMode.pic2=3");
              
            } else if (id(climate_mode_ha).state == "heat") {
              id(disp).send_command_printf("main.btnSetMode.pic=12");
              id(disp).send_command_printf("main.btnSetMode.pic2=13");
              
            } else if (id(climate_mode_ha).state == "heat_cool") {
              id(disp).send_command_printf("main.btnSetMode.pic=14");
              id(disp).send_command_printf("main.btnSetMode.pic2=15");
              
            } else if (id(climate_mode_ha).state == "dry") {
              id(disp).send_command_printf("main.btnSetMode.pic=16");
              id(disp).send_command_printf("main.btnSetMode.pic2=17");
              
            } else if (id(climate_mode_ha).state == "fan_only") {
              id(disp).send_command_printf("main.btnSetMode.pic=18");
              id(disp).send_command_printf("main.btnSetMode.pic2=19");
            } else {
              // unknown mode
            }


  #-------------------------------------------------
  # Sun state (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: sun_state
    entity_id: sun.sun
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - script.execute: update_weather_icon
            


  #-------------------------------------------------
  # Weather symbol (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.home
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - script.execute: update_weather_icon


#####################################################################
#
# Scripts
#
#####################################################################
script:
  id: update_weather_icon
  
  then:
    - lambda: |-
        
        int icon_id=39; /// unknown state
        
        if(id(weather_symbol).state == "clear-night") {
          icon_id=26;
          
        } else if(id(weather_symbol).state == "cloudy") {
          if(id(sun_state).state == "below_horizon") {
            icon_id=42;
          } else {
            icon_id=27;
          }
        } if(id(weather_symbol).state == "exceptional") {
          icon_id=28;
          
        } if(id(weather_symbol).state == "fog") {
          icon_id=29;
          
        } if(id(weather_symbol).state == "hail") {
          icon_id=30;
          
        } if(id(weather_symbol).state == "lightning") {
          icon_id=31;
          
        } if(id(weather_symbol).state == "lightning-rainy") {
          icon_id=32;
          
        } if(id(weather_symbol).state == "partlycloudy") {
          icon_id=33;
          
        } if(id(weather_symbol).state == "pouring") {
          icon_id=34;
          
        } if(id(weather_symbol).state == "rainy") {
          icon_id=35;
          
        } if(id(weather_symbol).state == "snowy") {
          icon_id=36;
          
        } if(id(weather_symbol).state == "snowy-rainy") {
          icon_id=37;
          
        } if(id(weather_symbol).state == "sunny") {
          if(id(sun_state).state == "below_horizon") {
            icon_id=26;
            
          } else {
            icon_id=38; 
          }
          
        } if(id(weather_symbol).state == "windy") {
          icon_id=40;
          
        } if(id(weather_symbol).state == "windy-variant") {
          icon_id=41;
        }
        
        id(disp).send_command_printf("main.picWeatherIcon.pic=%i", icon_id);
        id(disp).send_command_printf("selectFanSpeed.picWeatherIcon.pic=%i", icon_id);
        id(disp).send_command_printf("selectMode.picWeatherIcon.pic=%i", icon_id);      

        

#####################################################################
#
# Sensors
#
#####################################################################
sensor:

  #-------------------------------------------------
  # Wifi signal level
  #-------------------------------------------------
  - platform: wifi_signal
    name: $hass_entity_prefix Wifi signal
    update_interval: 60s  

  #-------------------------------------------------
  # A/C - Target temperature (To home assistant)
  #-------------------------------------------------
  - platform: nextion
    internal: true
    id: climate_targetTemp_panel
    variable_name: varTargetTemp
    on_value:
      - homeassistant.service:
          service: climate.set_temperature
          data:
            entity_id: $climate_entity
            temperature: !lambda "return x;"

  #-------------------------------------------------
  # A/C - Target temperature (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: climate_targetTemp_ha
    entity_id: $climate_entity
    attribute: temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - lambda: |-
            id(disp).send_command_printf("main.varTargetTemp.val=%i", int(x));
            id(disp).send_command_printf("main.txtTempSelect.val=%i", int(x));

  #-------------------------------------------------
  # A/C - Current temperature (From home assistant)
  #-------------------------------------------------
  - platform: homeassistant
    id: climate_currentTemp_ha
    entity_id: $climate_entity
    attribute: current_temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - lambda: id(disp).set_component_text_printf("main.txtRoomTemp", "%.1f ""\xb0""C", x);


  #-------------------------------------------------
  # A/C - Minimum allowable temperature
  #-------------------------------------------------
  - platform: homeassistant
    id: climate_mintemp_ha
    entity_id: $climate_entity
    attribute: min_temp
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - lambda: id(disp).send_command_printf("main.varMinTemp.val=%i", int(x));


  #-------------------------------------------------
  # A/C - Maximum allowable temperature
  #-------------------------------------------------
  - platform: homeassistant
    id: climate_maxtemp_ha
    entity_id: $climate_entity
    attribute: max_temp
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
            
        - lambda: id(disp).send_command_printf("main.varMaxTemp.val=%i", int(x));

  
  #-------------------------------------------------
  # nspanel thermisor sensor
  #-------------------------------------------------
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $hass_entity_prefix Temperature

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 30s
    attenuation: 11db

        
  #-------------------------------------------------
  # Outside temperature
  #-------------------------------------------------
  - platform: homeassistant
    id: outside_temperature
    entity_id: weather.home
    attribute: temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            id(disp).set_component_text_printf("main.txtOutsideTemp", "%.1f ""\xb0""C", x);
            id(disp).set_component_text_printf("selectFanSpeed.txtOutsideTemp", "%.1f ""\xb0""C", x);
            id(disp).set_component_text_printf("selectMode.txtOutsideTemp", "%.1f ""\xb0""C", x);
